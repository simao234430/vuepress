{"remainingRequest":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/simao/javascript_code/vuepress/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/simao/javascript_code/vuepress/docs/java/app-structure.md?vue&type=template&id=4ae0b343&","dependencies":[{"path":"/Users/simao/javascript_code/vuepress/docs/java/app-structure.md","mtime":1550041214205},{"path":"/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1550030168216},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1550030169776},{"path":"/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1550030168216},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/index.js","mtime":1550030169776},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1550030173624}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"directory-and-convention\\\"><a href=\\\"#directory-and-convention\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Directory and Convention</h1> <p>In the organization of files and directories, umi tries to choose the agreed upon way.</p> <p>The directory structure of a complex application is as follows:</p> <div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>.\\n├── dist/                           // default build output directory\\n├── mock/                           // The directory where the mock file is located, based on express\\n├── config/\\n    ├── config.js                   // umi configuration, same as .umirc.js, choose one\\n└── src/                            // source directory, optional\\n    ├──layouts/index.js             // global layout\\n    ├── pages/                      // page directory, the file inside is the route\\n        ├── .umi/                   // dev temp directory, need to be added to .gitignore\\n        ├── .umi-production/        // build temporary directory, will be deleted automatically\\n        ├── document.ejs            // HTML template\\n        ├── 404.js                  // 404 page\\n        ├── page1.js                // page 1, arbitrarily named, export react component\\n        ├── page1.test.js           // Use case file, umi test will match all files ending in .test.js and .e2e.js\\n        └── page2.js                // page 2, arbitrarily named\\n    ├── global.css                  // Conventional global style files, imported automatically, or global.less\\n    ├── global.js                   // can add polyfill here\\n├── .umirc.js                       // umi configuration, same as config/config.js, choose one\\n├── .env                            // environment variable\\n└── package.json\\n</code></pre></div><h2 id=\\\"es6-grammar\\\"><a href=\\\"#es6-grammar\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6 Grammar</h2> <p>Configuration files, mock files, etc. are registered in real time with <code>@babel/register</code>, so you can use ES6 syntax and es modules just like files in src.</p> <h2 id=\\\"dist\\\"><a href=\\\"#dist\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> dist</h2> <p>The default output path can be modified by configuring <code>outputPath</code>.</p> <h2 id=\\\"mock\\\"><a href=\\\"#mock\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> mock</h2> <p>It is agreed that all <code>.js</code> files in the mock directory will be parsed as mock files.</p> <p>For example, create a new <code>mock/users.js</code> with the following contents:</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">'/api/users'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"Then visit \"),_vm._ssrNode(\"<a href=\\\"http://localhost:8000/api/users\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"http://localhost:8000/api/users\"),_c('OutboundLink')],2),_vm._ssrNode(\" in your browser to see <code>['a', 'b']</code>.\")],2),_vm._ssrNode(\" <h2 id=\\\"src\\\"><a href=\\\"#src\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> src</h2> <p>By convention, <code>src</code> is the source directory. But optional, simple items can be added without the <code>src</code> directory.</p> <p>For example: the effect of the following two directory structures is the same.</p> <div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>+ src\\n  + pages\\n    - index.js\\n  + layouts\\n    - index.js\\n- .umirc.js\\n</code></pre></div><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>+ pages\\n  - index.js\\n+ layouts\\n  - index.js\\n- .umirc.js\\n</code></pre></div><h2 id=\\\"src-layouts-index-js\\\"><a href=\\\"#src-layouts-index-js\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> src/layouts/index.js</h2> <p>The global layout is actually a layer outside the route.</p> <p>For example, your route is:</p> <div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>[\\n  { path: '/', component: './pages/index' },\\n  { path: '/users', component: './pages/users' },\\n]\\n</code></pre></div><p>If there is <code>layouts/index.js</code>, then the route becomes:</p> <div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>[\\n  { path: '/', component: './layouts/index', routes: [\\n    { path: '/', component: './pages/index' },\\n    { path: '/users', component: './pages/users' },\\n  ] }\\n]\\n</code></pre></div><h2 id=\\\"src-pages\\\"><a href=\\\"#src-pages\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> src/pages</h2> <p>All the <code>(j|t)sx?</code> files under the pages are the routes. For more information on contracted routing, go to the Routing chapter.</p> <h2 id=\\\"src-pages-404-js\\\"><a href=\\\"#src-pages-404-js\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> src/pages/404.js</h2> <p>404 page. Note that there is a 404 prompt page provided by the built-in umi in development mode, so you can access this page only by explicitly accessing <code>/404</code>.</p> <h2 id=\\\"src-pages-document-ejs\\\"><a href=\\\"#src-pages-document-ejs\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> src/pages/document.ejs</h2> <p>When this file is available, it overrides the default HTML template. Needs to include at least the following code:</p> <div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>root<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><h2 id=\\\"src-pages-umi\\\"><a href=\\\"#src-pages-umi\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> src/pages/.umi</h2> <p>This is a temporary directory produced by umi dev. It contains <code>umi.js</code> and <code>router.js</code> by default, and some plugins will generate some other temporary files here. You can do some validation here, <strong>but please don't modify the code directly here, umi restart or file modification under pages will regenerate the files in this folder.</strong></p> <h2 id=\\\"src-pages-umi-production\\\"><a href=\\\"#src-pages-umi-production\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> src/pages/.umi-production</h2> <p>Same as <code>src/pages/.umi</code>, but generated in <code>umi build</code>, it will be automatically deleted after <code>umi build</code>.</p> <h2 id=\\\"test-js-and-e2e-js\\\"><a href=\\\"#test-js-and-e2e-js\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> .test.js and .e2e.js</h2> <p>The test file, <code>umi test</code> will find all the .(test|e2e).(j|t)s files to run the test.</p> <h2 id=\\\"src-global-j-t-sx\\\"><a href=\\\"#src-global-j-t-sx\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> src/global.(j|t)sx?</h2> <p>At the beginning of the entry file is automatically introduced, you can consider adding polyfill here.</p> <h2 id=\\\"src-global-css-less-sass-scss\\\"><a href=\\\"#src-global-css-less-sass-scss\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> src/global.(css|less|sass|scss)</h2> <p>This file does not go css modules, is automatically introduced, you can write some global styles, or do some style coverage.</p> <h2 id=\\\"umirc-js-and-config-config-js\\\"><a href=\\\"#umirc-js-and-config-config-js\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> .umirc.js and config/config.js</h2> <p>Umi's configuration file, choose one.</p> <h2 id=\\\"env\\\"><a href=\\\"#env\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> .env</h2> <p>Environment variables, such as:</p> <div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>CLEAR_CONSOLE=none\\nBROWSER=none\\n</code></pre></div>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}