{"remainingRequest":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/simao/javascript_code/vuepress/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/simao/javascript_code/vuepress/docs/java/mock-data.md?vue&type=template&id=a48b1ef2&","dependencies":[{"path":"/Users/simao/javascript_code/vuepress/docs/java/mock-data.md","mtime":1550041214208},{"path":"/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1550030168216},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1550030169776},{"path":"/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1550030168216},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/index.js","mtime":1550030169776},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1550030173624}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"mock-data\"><a class=\"header-anchor\" href=\"#mock-data\" aria-hidden=\"true\">#</a> Mock Data</h1>\n<p>Mock data is indispensable in front-end development process and it is the key link to separate the front-end from the back-end. Through the pre-agreed interface with the server-side, simulation request data and even logic, can make the front-end development independent, will not be blocked by the development of the server-side.</p>\n<h2 id=\"using-the-mock-feature-of-umi\"><a class=\"header-anchor\" href=\"#using-the-mock-feature-of-umi\" aria-hidden=\"true\">#</a> Using the mock feature of umi</h2>\n<p>Umi agreed that the files under the mock folder or _mock.js in page(s) folder are mock files, files export interface definitions, support for real-time refresh based on 'require' dynamic analysis, support for ES6 syntax, and with friendly error messages, see <a href=\"https://umijs.org/guide/mock-data.html\" target=\"_blank\" rel=\"noopener noreferrer\">mock-data<OutboundLink/></a> for more detail.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// supported values are Object and Array</span>\n  <span class=\"token string\">'GET /api/users'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> users<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// GET and POST can be omitted</span>\n  <span class=\"token string\">'/api/users/1'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// support for custom functions, APIs refer to express@4</span>\n  <span class=\"token string\">'POST /api/users/create'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>When a client(browser) sends a request, such as <code>GET /api/users</code>, the locally launched <code>umi dev</code> will match the request path and method with this configuration file, if it find a match, the request will be processed through configuration, just like the sample, you can directly return the data, or process and redirect it to another server through a function.</p>\n<p>For example, define the following mapping rules as below:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&#39;GET /api/currentUser&#39;: {\n  name: &#39;momo.zxy&#39;,\n  avatar: imgMap.user,\n  userid: &#39;00000001&#39;,\n  notifyCount: 12,\n},\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Request local interface <code>/api/users</code>:</p>\n<p>Request header</p>\n<img src=\"https://gw.alipayobjects.com/zos/rmsportal/ZdlcFoYonSGDupWnktZn.png\" width=\"400\" />\n<p>Response data</p>\n<img src=\"https://gw.alipayobjects.com/zos/rmsportal/OLHIXePGHkkFoaZVQAts.png\" width=\"600\" />\n<h3 id=\"introduce-mock-js\"><a class=\"header-anchor\" href=\"#introduce-mock-js\" aria-hidden=\"true\">#</a> Introduce Mock.js</h3>\n<p><a href=\"http://mockjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Mock.js<OutboundLink/></a> is a commonly used third-party library to help generate mock data. Of course, you can use any library you like working with roadhog to build data simulation functions.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> mockjs <span class=\"token keyword\">from</span> <span class=\"token string\">'mockjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use third-party library such as mockjs</span>\n  <span class=\"token string\">'GET /api/tags'</span><span class=\"token punctuation\">:</span> mockjs<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'list|100'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'@city'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value|1-100'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type|0-2'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"add-a-cross-domain-request-header\"><a class=\"header-anchor\" href=\"#add-a-cross-domain-request-header\" aria-hidden=\"true\">#</a> Add a cross-domain request header</h3>\n<p>Just set the header of <code>response</code>:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&#39;POST /api/users/create&#39;: (req, res) =&gt; {\n  ...\n  res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n  ...\n},\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"properly-split-your-mock-file\"><a class=\"header-anchor\" href=\"#properly-split-your-mock-file\" aria-hidden=\"true\">#</a> Properly split your mock file</h2>\n<p>For the entire system, the request interface is complex and numerous, in order to handle a large number of mock request scenarios, we usually abstract each data model into a file, and put them all in the <code>mock</code> folder. And then they will be automatically introduced.</p>\n<img src=\"https://gw.alipayobjects.com/zos/rmsportal/wbeiDacBkchXrTafasBy.png\" width=\"200\" />\n<h2 id=\"how-to-simulate-delay\"><a class=\"header-anchor\" href=\"#how-to-simulate-delay\" aria-hidden=\"true\">#</a> How to simulate delay</h2>\n<p>In order to simulate the network data request more realistically, it is necessary to simulate network delay time in most cases.</p>\n<h3 id=\"add-settimeout-manually-to-simulate-delay\"><a class=\"header-anchor\" href=\"#add-settimeout-manually-to-simulate-delay\" aria-hidden=\"true\">#</a> Add setTimeout manually to simulate delay</h3>\n<p>You can rewrite the proxy method of the request and add the processing of simulation delay to it, like:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token string\">'POST /api/forms'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"use-plugins-to-simulate-delay\"><a class=\"header-anchor\" href=\"#use-plugins-to-simulate-delay\" aria-hidden=\"true\">#</a> Use plugins to simulate delay</h3>\n<p>Although the method above is simple, it may be troublesome when you need to add delays for all request, it can be simplified by a third-party plugin，such as <a href=\"https://github.com/nikogu/roadhog-api-doc/blob/master/lib/utils.js#L5\" target=\"_blank\" rel=\"noopener noreferrer\">roadhog-api-doc#delay<OutboundLink/></a>.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> delay <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'roadhog-api-doc'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'GET /api/project/notice'</span><span class=\"token punctuation\">:</span> getNotice<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/activities'</span><span class=\"token punctuation\">:</span> getActivities<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/rule'</span><span class=\"token punctuation\">:</span> getRule<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/tags'</span><span class=\"token punctuation\">:</span> mockjs<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'list|100'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'@city'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value|1-100'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type|0-2'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/fake_list'</span><span class=\"token punctuation\">:</span> getFakeList<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/fake_chart_data'</span><span class=\"token punctuation\">:</span> getFakeChartData<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/profile/basic'</span><span class=\"token punctuation\">:</span> getProfileBasicData<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/profile/advanced'</span><span class=\"token punctuation\">:</span> getProfileAdvancedData<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'POST /api/register'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> <span class=\"token string\">'ok'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/notices'</span><span class=\"token punctuation\">:</span> getNotices<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Calling the delay function, unified processing</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"dynamic-mock-data\"><a class=\"header-anchor\" href=\"#dynamic-mock-data\" aria-hidden=\"true\">#</a> Dynamic mock data</h2>\n<p>If you want to generate dynamic mock data on every request, you should use functions.</p>\n<p>For example:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// undynamic</span>\n<span class=\"token string\">'/api/random'</span><span class=\"token punctuation\">:</span> Mock<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// random once only</span>\n  <span class=\"token string\">'number|1-100'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// dynamic</span>\n<span class=\"token string\">'/api/random'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>Mock<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// random every request</span>\n    <span class=\"token string\">'number|1-100'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"joint-debugging\"><a class=\"header-anchor\" href=\"#joint-debugging\" aria-hidden=\"true\">#</a> Joint debugging</h2>\n<p>After finishing the local development, if the interface of server-side meets the previous convention, you only need to open the local proxy or redirect the proxy to the target server to access the real server data, which is very convenient.</p>\n</div>\n",null]}