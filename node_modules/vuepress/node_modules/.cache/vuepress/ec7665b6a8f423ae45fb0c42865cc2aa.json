{"remainingRequest":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/simao/javascript_code/vuepress/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/simao/javascript_code/vuepress/docs/java/java_intro.md?vue&type=template&id=01ef1c47&","dependencies":[{"path":"/Users/simao/javascript_code/vuepress/docs/java/java_intro.md","mtime":1550312615520},{"path":"/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1550030168216},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1550030169776},{"path":"/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1550030168216},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/index.js","mtime":1550030169776},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1550030173624}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"java简介和初探\"><a class=\"header-anchor\" href=\"#java简介和初探\" aria-hidden=\"true\">#</a> java简介和初探</h1>\n<h2 id=\"计算机语言简介\"><a class=\"header-anchor\" href=\"#计算机语言简介\" aria-hidden=\"true\">#</a> 计算机语言简介</h2>\n<p>计算机语言：（Computer Language）指用于人与计算机之间通讯的语言。计算机语言是人与计算机之间传递信息的媒介。计算机系统最大特征是指令通过一种语言传达给机器。为了使电子计算机进行各种工作，就需要有一套用以编写计算机程序的数字、字符和语法规划，由这些字符和语法规则组成计算机各种指令（或各种语句）。这些就是计算机能接受的语言。程序员通过这些指令来指挥计算机进行各种工作。<br>\n计算机语言主要由机器语言、汇编语言、高级语言，组成。<br>\n机器语言：毋庸置疑是计算机可以直接识别和使用的语言。但是在编程的时候，通常不会选择机器语言，因为机器语言都是由二进制0或1组成的编码。不便于编程人员的记忆与识别。<br>\n那么汇编和高级语言是编程人员常用的语言.<br>\n汇编语言：采用英文缩写的标识符，容易识别和记忆。那么为什么不都用汇编语言编程，这就要解释什么是高级语言。<br>\n高级语言：采用更接近人类的自然语言进行编程，进一步简化了程序编程的过程，所以，大多数编程者会选择高级语言。<br>\n现在我们讲解的Java语言就是高级语言的一种。</p>\n<h2 id=\"什么是java\"><a class=\"header-anchor\" href=\"#什么是java\" aria-hidden=\"true\">#</a> 什么是java</h2>\n<p>Java是SUN(Stanford University Network，斯坦福大学网络公司)1995年推出的一门高级编程语言，是一种面向Internet的编程语言。随着Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</p>\n<p>Java是一种可以撰写跨平台应用程序的、面向对象的程序设计语言。简单说，Java就是一种语言，不过是一种针对jvm的语言，Java编译后是字节码，而jvm会把这些字节码解释成机器码，然后做出相应的动作。所以java立下的flag是“一次编写到处运行”。</p>\n<img :src=\"('/java_layers.png')\" alt=\"foo\">\n<p>Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p>\n<h2 id=\"java语言发展简史\"><a class=\"header-anchor\" href=\"#java语言发展简史\" aria-hidden=\"true\">#</a> java语言发展简史</h2>\n<blockquote>\n<p>詹姆斯·高斯林（James Gosling） SUN– (Stanford University Network斯坦福大学网络公司)<br>\n1990年初，最初被命名为Oak；\n1995年5月23日，Java语言诞生<br>\n1996年1月 JDK1.0<br>\n1997年2月 JDK1.1<br>\n1998年12月 JDK1.2(将Java分成了J2SE,J2EE,J2ME)<br>\n2000年5月 J2SE1.3<br>\n2002年2月 J2SE1.4(1.4.2版本很多公司在使用)<br>\n2004年10月  JDK1.5(改名JavaSE5.0,JavaEE,JavaME)<br>\n2006年12月 JavaSE6.0<br>\n2009年04月20日，甲骨文(Oracle)74亿美元收购Sun。<br>\n2011年7月  JavaSE7.0(市场主流版本)<br>\n2014年3月 JavaSE8.0<br>\n2017年9月 JavaSE9.0</p>\n</blockquote>\n<h2 id=\"java的特点\"><a class=\"header-anchor\" href=\"#java的特点\" aria-hidden=\"true\">#</a> java的特点</h2>\n<p>1.简单</p>\n<blockquote>\n<p>Java看起来设计的很像C++，但是为了是语言小和容易熟悉，设计者把C++语言种许多可用的特征去掉了，这些特征是一般程序员很&gt;少使用的，例如：Java不支持go to语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载&gt;（重载overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指&gt;针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，（垃圾回收机制）使用户不必为存储（内存）管理问题烦&gt;恼，能把更多的时间和精力花在研发上</p>\n</blockquote>\n<p>2.完全面向对象</p>\n<blockquote>\n<p>Java是一个面向对象的语言，对程序员来说，这意味着要注意应用数据和操作数据的方法（method），而不是严格地用过程来思&gt;考。在一个面向对象的系统中，类（class）是数据和操作数据的方法和集合。数据和方法一起描述对象（object）的状态和行&gt;为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根&gt;类，它是具有一般行为的类。Java程序是用来组织的。</p>\n<p>为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字implements）。Java语言全面支持动态绑定，而C++语言只对函数使用动态绑定。</p>\n</blockquote>\n<blockquote>\n<p>Java还包括一个类的扩展集合，分别组成各种程序包（package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing tookit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。</p>\n</blockquote>\n<p>3.可移植性好</p>\n<blockquote>\n<p>Java使得语言声明不依赖与实现的方面。例如，Java显示说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法&gt;描述）。</p>\n<p>Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写\n4.健壮性<br>\nJava原来是用作编写消费类家用电子产品软件的语言，所以他是被设计成高可靠和稳健软件的。Java消除了某些编程错误，使得用&gt;它写可靠软件相当容易。</p>\n<p>Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显示方法声明，它不支持C语言风格的隐式&gt;声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致会开发出更可靠的程序。</p>\n<p>可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重新存储和讹误（文字错误；字句上的疏漏差误）数&gt;据。类似的，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序员也执行许&gt;多运行时的检查，诸如验证所有数组和串访问是否在界限之内。</p>\n</blockquote>\n<p>5.多线程</p>\n<blockquote>\n<p>Java语言是支持多线程的，所谓的多线程可以简单地理解为程序中有多个任务可以并发执行，这样可以在很大程度上提高程序的执行效率。</p>\n</blockquote>\n<p>6.高性能</p>\n<blockquote>\n<p>Java是一种先编译后解释的语言，所以他不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者&gt;制作了“及时”编译程序，它能在运行时吧Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。</p>\n<p>Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。</p>\n</blockquote>\n<p>7.安全性</p>\n<blockquote>\n<p>Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中存储引用在运行时由Java解释程序决定实际存储地址。</p>\n</blockquote>\n<blockquote>\n<p>Java运行系统使用字节码验证过程保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。&gt;例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。</p>\n<p>Java语言不支持指针，一切对内存的访问都必须通过对象的实例变量来实现，从而使应用更安全。</p>\n</blockquote>\n<p>8.分布式</p>\n<blockquote>\n<p>ava设计成支持在网络上应用，它是分布式语言，Java既支持各种层次的网络连接，又以Socket类支持可靠的流（steam）网络&gt;连接，所以用户可以产生分布式的客户机和服务器。</p>\n<p>网络变成软件应用的分布运载工具。Java程序只需编写一次，就可到处运行。</p>\n</blockquote>\n<h2 id=\"java的用途-领域\"><a class=\"header-anchor\" href=\"#java的用途-领域\" aria-hidden=\"true\">#</a> java的用途 领域</h2>\n<p>Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。</p>\n<h2 id=\"java的版本\"><a class=\"header-anchor\" href=\"#java的版本\" aria-hidden=\"true\">#</a> java的版本</h2>\n<p>常用的 java 程序分为  Java SE、java EE、Java ME三个版本，介绍如下：</p>\n<ol>\n<li>\n<p>Java SE（Java Platform，Standard Edition）\njava se 以前称为J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE是基础包，但是也包含了支持 Java Web 服务开发的类，并为 Java Platform，Enterprise Edition（Java EE）提供基础。</p>\n</li>\n<li>\n<p>java ee（Java Platform，Enterprise Edition）。\n这个版本以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web 2.0 应用程序。</p>\n</li>\n<li>\n<p>Java ME（Java Platform，Micro Edition）。\n这个版本以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。</p>\n</li>\n</ol>\n<p>说得更简单片面一点：</p>\n<p>Java SE 是做电脑上运行的软件。<br>\nJava EE 是用来做网站的-（我们常见的JSP技术）<br>\nJava ME 是做手机软件的</p>\n<p>我们这里先只介绍 Java SE</p>\n<h3 id=\"j2se的架构\"><a class=\"header-anchor\" href=\"#j2se的架构\" aria-hidden=\"true\">#</a> j2se的架构</h3>\n<p>JRE为Java的运行时环境，是运行Java程序依赖的。如果仅仅是运行已经存在的Java程序，只安装JRE即可。\nJDK为Java的开发环境，是开发时依赖的。包含JRE。\n没有JDK的话，无法编译Java程序，如果想只运行Java程序，要确保已安装相应的JRE。\nJava语言通过在不同的操作系统上安装对应的Java虚拟机实现了跨平台， 即java的.class程序可以在不同操作系统上均可以运行。(java的.class文件相当于Windows中的.exe文件，是可执行的程序)</p>\n<h4 id=\"jdk-jre架构图\"><a class=\"header-anchor\" href=\"#jdk-jre架构图\" aria-hidden=\"true\">#</a> jdk jre架构图</h4>\n<img :src=\"('/jdkjre.png')\" alt=\"foo\">\n<h4 id=\"jdk-jre-jvm关系图\"><a class=\"header-anchor\" href=\"#jdk-jre-jvm关系图\" aria-hidden=\"true\">#</a> jdk jre jvm关系图</h4>\n<img :src=\"('/jdkjre1.png')\" alt=\"foo\">\n<img :src=\"('/jdkjre2.png')\" alt=\"foo\">\n<h3 id=\"学会使用命令\"><a class=\"header-anchor\" href=\"#学会使用命令\" aria-hidden=\"true\">#</a> 学会使用命令</h3>\n<p>这是为了理解操作系统概念和写一个java程序做准备</p>\n<p>1 简单命令</p>\n<h2 id=\"第一个java-hello-world程序\"><a class=\"header-anchor\" href=\"#第一个java-hello-world程序\" aria-hidden=\"true\">#</a> 第一个java Hello World程序</h2>\n<p>我们怎么来编写第一个java程序尼 步骤如下:</p>\n<p>1.准备一个可用的文本编辑器 记事本即可 用文本编辑器编写以下内容 并且命名为Test.java 内容要和下图一样</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>2.安装jdk</p>\n<ul>\n<li>jdk下载</li>\n<li>jdk安装: 双击安装</li>\n<li>验证java jdk安装是否成功</li>\n</ul>\n<p>3.找到刚刚编写好的Test.java文件所在的目录 用javac命令 编译它得到一个Test.class文件</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>javac Test.java\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>4.用java命令 执行Test.class文件得到程序的执行结果</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>java Test.class\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>得到在控制台上打印Hello World!结果 如下图所示:</p>\n<p>5.思考 为什么要配置环境变量</p>\n<p>总结为下图:\n<img :src=\"('/j_process.png')\" alt=\"foo\"></p>\n<h2 id=\"切换到ide\"><a class=\"header-anchor\" href=\"#切换到ide\" aria-hidden=\"true\">#</a> 切换到IDE</h2>\n<h2 id=\"怎么样学好java\"><a class=\"header-anchor\" href=\"#怎么样学好java\" aria-hidden=\"true\">#</a> 怎么样学好java</h2>\n<h2 id=\"api文档\"><a class=\"header-anchor\" href=\"#api文档\" aria-hidden=\"true\">#</a> API文档</h2>\n<h2 id=\"实践练习\"><a class=\"header-anchor\" href=\"#实践练习\" aria-hidden=\"true\">#</a> 实践练习</h2>\n<p>更改代码输出 在控制台输出  这是我的第一个java程序 如下图所示</p>\n</div>\n",null]}