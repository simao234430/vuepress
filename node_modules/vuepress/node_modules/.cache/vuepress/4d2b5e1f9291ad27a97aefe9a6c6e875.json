{"remainingRequest":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/simao/javascript_code/vuepress/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/simao/javascript_code/vuepress/docs/guide/app-structure.md?vue&type=template&id=81055922&","dependencies":[{"path":"/Users/simao/javascript_code/vuepress/docs/guide/app-structure.md","mtime":1550041214205},{"path":"/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1550030168216},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1550030169776},{"path":"/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1550030168216},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/index.js","mtime":1550030169776},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1550030173624}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"directory-and-convention\"><a class=\"header-anchor\" href=\"#directory-and-convention\" aria-hidden=\"true\">#</a> Directory and Convention</h1>\n<p>In the organization of files and directories, umi tries to choose the agreed upon way.</p>\n<p>The directory structure of a complex application is as follows:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n├── dist/                           // default build output directory\n├── mock/                           // The directory where the mock file is located, based on express\n├── config/\n    ├── config.js                   // umi configuration, same as .umirc.js, choose one\n└── src/                            // source directory, optional\n    ├──layouts/index.js             // global layout\n    ├── pages/                      // page directory, the file inside is the route\n        ├── .umi/                   // dev temp directory, need to be added to .gitignore\n        ├── .umi-production/        // build temporary directory, will be deleted automatically\n        ├── document.ejs            // HTML template\n        ├── 404.js                  // 404 page\n        ├── page1.js                // page 1, arbitrarily named, export react component\n        ├── page1.test.js           // Use case file, umi test will match all files ending in .test.js and .e2e.js\n        └── page2.js                // page 2, arbitrarily named\n    ├── global.css                  // Conventional global style files, imported automatically, or global.less\n    ├── global.js                   // can add polyfill here\n├── .umirc.js                       // umi configuration, same as config/config.js, choose one\n├── .env                            // environment variable\n└── package.json\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"es6-grammar\"><a class=\"header-anchor\" href=\"#es6-grammar\" aria-hidden=\"true\">#</a> ES6 Grammar</h2>\n<p>Configuration files, mock files, etc. are registered in real time with <code>@babel/register</code>, so you can use ES6 syntax and es modules just like files in src.</p>\n<h2 id=\"dist\"><a class=\"header-anchor\" href=\"#dist\" aria-hidden=\"true\">#</a> dist</h2>\n<p>The default output path can be modified by configuring <code>outputPath</code>.</p>\n<h2 id=\"mock\"><a class=\"header-anchor\" href=\"#mock\" aria-hidden=\"true\">#</a> mock</h2>\n<p>It is agreed that all <code>.js</code> files in the mock directory will be parsed as mock files.</p>\n<p>For example, create a new <code>mock/users.js</code> with the following contents:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Then visit <a href=\"http://localhost:8000/api/users\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8000/api/users<OutboundLink/></a> in your browser to see <code>['a', 'b']</code>.</p>\n<h2 id=\"src\"><a class=\"header-anchor\" href=\"#src\" aria-hidden=\"true\">#</a> src</h2>\n<p>By convention, <code>src</code> is the source directory. But optional, simple items can be added without the <code>src</code> directory.</p>\n<p>For example: the effect of the following two directory structures is the same.</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>+ src\n  + pages\n    - index.js\n  + layouts\n    - index.js\n- .umirc.js\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>+ pages\n  - index.js\n+ layouts\n  - index.js\n- .umirc.js\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"src-layouts-index-js\"><a class=\"header-anchor\" href=\"#src-layouts-index-js\" aria-hidden=\"true\">#</a> src/layouts/index.js</h2>\n<p>The global layout is actually a layer outside the route.</p>\n<p>For example, your route is:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>[\n  { path: &#39;/&#39;, component: &#39;./pages/index&#39; },\n  { path: &#39;/users&#39;, component: &#39;./pages/users&#39; },\n]\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If there is <code>layouts/index.js</code>, then the route becomes:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>[\n  { path: &#39;/&#39;, component: &#39;./layouts/index&#39;, routes: [\n    { path: &#39;/&#39;, component: &#39;./pages/index&#39; },\n    { path: &#39;/users&#39;, component: &#39;./pages/users&#39; },\n  ] }\n]\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"src-pages\"><a class=\"header-anchor\" href=\"#src-pages\" aria-hidden=\"true\">#</a> src/pages</h2>\n<p>All the <code>(j|t)sx?</code> files under the pages are the routes. For more information on contracted routing, go to the Routing chapter.</p>\n<h2 id=\"src-pages-404-js\"><a class=\"header-anchor\" href=\"#src-pages-404-js\" aria-hidden=\"true\">#</a> src/pages/404.js</h2>\n<p>404 page. Note that there is a 404 prompt page provided by the built-in umi in development mode, so you can access this page only by explicitly accessing <code>/404</code>.</p>\n<h2 id=\"src-pages-document-ejs\"><a class=\"header-anchor\" href=\"#src-pages-document-ejs\" aria-hidden=\"true\">#</a> src/pages/document.ejs</h2>\n<p>When this file is available, it overrides the default HTML template. Needs to include at least the following code:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"src-pages-umi\"><a class=\"header-anchor\" href=\"#src-pages-umi\" aria-hidden=\"true\">#</a> src/pages/.umi</h2>\n<p>This is a temporary directory produced by umi dev. It contains <code>umi.js</code> and <code>router.js</code> by default, and some plugins will generate some other temporary files here. You can do some validation here, <strong>but please don't modify the code directly here, umi restart or file modification under pages will regenerate the files in this folder.</strong></p>\n<h2 id=\"src-pages-umi-production\"><a class=\"header-anchor\" href=\"#src-pages-umi-production\" aria-hidden=\"true\">#</a> src/pages/.umi-production</h2>\n<p>Same as <code>src/pages/.umi</code>, but generated in <code>umi build</code>, it will be automatically deleted after <code>umi build</code>.</p>\n<h2 id=\"test-js-and-e2e-js\"><a class=\"header-anchor\" href=\"#test-js-and-e2e-js\" aria-hidden=\"true\">#</a> .test.js and .e2e.js</h2>\n<p>The test file, <code>umi test</code> will find all the .(test|e2e).(j|t)s files to run the test.</p>\n<h2 id=\"src-global-j-t-sx\"><a class=\"header-anchor\" href=\"#src-global-j-t-sx\" aria-hidden=\"true\">#</a> src/global.(j|t)sx?</h2>\n<p>At the beginning of the entry file is automatically introduced, you can consider adding polyfill here.</p>\n<h2 id=\"src-global-css-less-sass-scss\"><a class=\"header-anchor\" href=\"#src-global-css-less-sass-scss\" aria-hidden=\"true\">#</a> src/global.(css|less|sass|scss)</h2>\n<p>This file does not go css modules, is automatically introduced, you can write some global styles, or do some style coverage.</p>\n<h2 id=\"umirc-js-and-config-config-js\"><a class=\"header-anchor\" href=\"#umirc-js-and-config-config-js\" aria-hidden=\"true\">#</a> .umirc.js and config/config.js</h2>\n<p>Umi's configuration file, choose one.</p>\n<h2 id=\"env\"><a class=\"header-anchor\" href=\"#env\" aria-hidden=\"true\">#</a> .env</h2>\n<p>Environment variables, such as:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>CLEAR_CONSOLE=none\nBROWSER=none\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}