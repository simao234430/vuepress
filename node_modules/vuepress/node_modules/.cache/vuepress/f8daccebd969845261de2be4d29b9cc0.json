{"remainingRequest":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/simao/javascript_code/vuepress/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/simao/javascript_code/vuepress/docs/java/runtime-config.md?vue&type=template&id=61d685d6&","dependencies":[{"path":"/Users/simao/javascript_code/vuepress/docs/java/runtime-config.md","mtime":1550041214208},{"path":"/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1550030168216},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1550030169776},{"path":"/Users/simao/javascript_code/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1550030168216},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vue-loader/lib/index.js","mtime":1550030169776},{"path":"/Users/simao/javascript_code/vuepress/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1550030173624}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"runtime-config\\\"><a href=\\\"#runtime-config\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Runtime Config</h1> <div class=\\\"warning custom-block\\\"><p class=\\\"custom-block-title\\\">WARNING</p> <p>This article has not been translated yet. Wan't to help us out? Click the <code>Edit this page on GitHub</code> at the end of the page.</p></div> <h2 id=\\\"为什么有运行时配置？\\\"><a href=\\\"#为什么有运行时配置？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么有运行时配置？</h2> <p>我们通过 <code>.umirc.js</code> 做编译时的配置，这能覆盖大量场景，但有一些却是编译时很难触及的。</p> <p>比如：</p> <ul><li>在出错时显示个 message 提示用户</li> <li>在加载和路由切换时显示个 loading</li> <li>页面载入完成时请求后端，根据响应动态修改路由</li></ul> <p>这些在编译时就很难处理，或者不能处理了。</p> <h2 id=\\\"配置方式\\\"><a href=\\\"#配置方式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 配置方式</h2> <p>umi 约定 <code>src</code> 目录下的 <code>app.js</code> 为运行时的配置文件。</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>+ src\\n  - app.js      <span class=\\\"token comment\\\"># 运行时配置文件</span>\\n- package.json\\n</code></pre></div><h2 id=\\\"配置列表\\\"><a href=\\\"#配置列表\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 配置列表</h2> <h3 id=\\\"patchroutes\\\"><a href=\\\"#patchroutes\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> patchRoutes</h3> <p>用于运行时修改路由。</p> <p>参数：</p> <ul><li>routes: <code>Array</code>，路由配置</li></ul> <p>e.g. 添加一个 <code>/foo</code> 的路由，</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">patchRoutes</span><span class=\\\"token punctuation\\\">(</span>routes<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  routes<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unshift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/foo'</span><span class=\\\"token punctuation\\\">,</span>\\n    component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./routes/foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>可能的场景：</p> <ul><li>和 <code>render</code> 配合使用，请求服务端根据响应动态更新路由</li> <li>修改全部路由，加上某个前缀</li> <li>...</li></ul> <p>注：</p> <ol><li>同样适用约定式路由</li> <li>直接修改 <code>routes</code> 就好，不要返回新的路由对象</li></ol> <h3 id=\\\"render\\\"><a href=\\\"#render\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> render</h3> <p>用于改写把整个应用 render 到 dom 数里的方法。</p> <p>参数：</p> <ul><li>oldRender， <code>Function</code>，原始 render 方法，需至少被调用一次</li></ul> <p>e.g. 延迟 1s 渲染应用，</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>oldRender<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>oldRender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>可能的场景：</p> <ol><li>渲染应用之前做权限校验，不通过则跳转到登录页</li></ol> <h3 id=\\\"onroutechange\\\"><a href=\\\"#onroutechange\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> onRouteChange</h3> <p>用于在初始加载和路由切换时做一些事情。</p> <p>参数：</p> <ul><li>Object\\n<ul><li>location：<code>Object</code>, history 提供的 location 对象</li> <li>routes: <code>Array</code>, 路由配置</li> <li>action: <code>PUSH|POP|REPLACE|undefined</code>，初次加载时为 <code>undefined</code></li></ul></li></ul> <p>e.g.</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">onRouteChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> location<span class=\\\"token punctuation\\\">,</span> routes<span class=\\\"token punctuation\\\">,</span> action <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">bacon</span><span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">.</span>pathname<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>可能的场景：</p> <ol><li>埋点统计</li></ol> <p>注：</p> <ol><li>初次加载时也会执行，但 action 为 <code>undefined</code></li></ol> <h3 id=\\\"rootcontainer\\\"><a href=\\\"#rootcontainer\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> rootContainer</h3> <p>用于封装 root container，可以取一部分，或者外面套一层，等等。</p> <p>参数：</p> <ul><li>container，<code>ReactComponent</code>，React 应用最上层的根组件</li></ul> <p>e.g.</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">rootContainer</span><span class=\\\"token punctuation\\\">(</span>container<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> DvaContainer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'@tmp/DvaContainer'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>DvaContainer<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> container<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>可能的场景：</p> <ol><li>dva、intl 等需要在外层有个 Provider 的场景</li></ol> <h3 id=\\\"modifyrouteprops\\\"><a href=\\\"#modifyrouteprops\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> modifyRouteProps</h3> <p>修改传给路由组件的 props。</p> <p>参数：</p> <ul><li><p>props，<code>Object</code>，原始 props</p></li> <li><p>Object</p> <ul><li>route，<code>Object</code>，当前路由配置</li></ul></li></ul> <p>e.g.</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">modifyRouteProps</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> route <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">,</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bar'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>注：</p> <ol><li>需返回新的 props</li></ol>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}